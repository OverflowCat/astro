<script>
	type Direction = 'forward' | 'back';

	let currentIndex = history.state?.index || 0;
	if(!history.state) {
		history.replaceState({index: currentIndex}, document.title);
	}

  async function getHTML(href: string) {
    let res = await fetch(href)
    let html = await res.text();
    return html;
  }

	const parser = new DOMParser();

  async function updateDOM(dir: Direction, html: string) {
    const doc = parser.parseFromString(html, 'text/html');
		doc.documentElement.dataset.astroTransition = dir;
    document.documentElement.replaceWith(doc.documentElement);
  }

	async function navigate(dir: Direction, href: string) {
		let htmlPromise = getHTML(href);
		let finished: Promise<void>;
		document.documentElement.dataset.astroTransition = dir;
		const html = await htmlPromise;
		if(document.startViewTransition) {
			finished = document.startViewTransition(() => updateDOM(dir, html)).finished;
		} else {
			finished = updateDOM(dir, html);
		}
		try {
			await finished;
		} finally {
			document.documentElement.removeAttribute('data-astro-transition');
		}
	}

  document.addEventListener('click', (ev) => {
		let link = ev.target;
		if (link instanceof HTMLAnchorElement &&
			link.href &&
			(!link.target || link.target === '_self') &&
			link.origin === location.origin &&
			ev.button === 0 && // left clicks only
			!ev.metaKey && // new tab (mac)
			!ev.ctrlKey && // new tab (windows)
			!ev.altKey && // download
			!ev.shiftKey &&
			!ev.defaultPrevented
			) {
			ev.preventDefault();
    	navigate('forward', link.href);
			history.pushState({index: currentIndex + 1}, '', link.href);
			currentIndex++;
		}
  });
	window.addEventListener('popstate', ev => {
		const index = history.state?.index ?? (currentIndex + 1);
		const direction: Direction = index > currentIndex ? 'forward' : 'back';
		navigate(direction, location.href);
		currentIndex = index;
	});

	// Prefetching
	function maybePrefetch(pathname: string) {
		if(document.querySelector(`link[rel=prefetch][href="${pathname}"]`)) return;
		if(navigator.connection){
			let conn = navigator.connection;
			if(conn.saveData || /(2|3)g/.test(conn.effectiveType || '')) return;
		}
		let link = document.createElement('link');
		link.setAttribute('rel', 'prefetch');
		link.setAttribute('href', pathname);
		document.head.append(link);
	}

	['mouseenter', 'touchstart', 'focus'].forEach(evName => {
		document.addEventListener(evName, ev => {
			if(ev.target instanceof HTMLAnchorElement) {
				let el = ev.target;
				if(el.origin === location.origin && el.pathname !== location.pathname) {
					maybePrefetch(el.pathname);
				}
			}
		}, { passive: true, capture: true });
	});
</script>
